import sqlite3
from pathlib import Path
from typing import Dict

from scipion.constants import (
    CLASSES_TBL,
    LABEL_PROPERTY,
    COLUMN_NAME,
    PROPERTIES_TBL,
    PROP_KEY,
    PROP_VALUE,
    OBJECTS_TBL,
)


def connect_db(db_path: Path) -> sqlite3.Connection | None:
    try:
        print(f"Connecting to {db_path}...")
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row  # optional, handy if you want dict-like rows
        return conn
    except sqlite3.Error as e:
        if "conn" in locals():
            conn.close()
        raise Exception(f"SQLite error: {e}")


def _map_master_table(
    conn: sqlite3.Connection, table_name: str, column_names: list[str]
) -> Dict[str, str]:
    cur = conn.cursor()
    col0, col1 = column_names
    # Only take rows where both fields are not NULL (optional but common-sense)
    cur.execute(f"""
        SELECT {col0}, {col1}
        FROM {table_name}
        WHERE {col0} IS NOT NULL AND {col1} IS NOT NULL
    """)
    return {row[0]: row[1] for row in cur.fetchall()}


def map_classes_table(
    conn: sqlite3.Connection, table_name: str = CLASSES_TBL
) -> Dict[str, str]:
    return _map_master_table(
        conn, table_name=table_name, column_names=[LABEL_PROPERTY, COLUMN_NAME]
    )


def map_properties_table(conn: sqlite3.Connection) -> Dict[str, str]:
    return _map_master_table(
        conn, table_name=PROPERTIES_TBL, column_names=[PROP_KEY, PROP_VALUE]
    )


def _get_values_from_table(
    conn: sqlite3.Connection, table_name: str, field_name: str
) -> list[str]:
    """Get the tilt-series identifiers from a sqlite connection to a
    tilt-series movies sqlite file generated by Scipion."""
    try:
        cur = conn.cursor()
        cur.execute(f"SELECT {field_name} FROM {table_name}")
        return [row[0] for row in cur.fetchall()]
    except sqlite3.OperationalError as e:
        conn.close()
        raise Exception(
            f"Error consulting the table {table_name}. The "
            f"introduced file may not be a SetOfTiltSeriesMovies "
            f"Scipion sqlite file. Exception -> {e}"
        )


def get_from_obj_tbl(
    conn: sqlite3.Connection, field_name: str, tsm_class_dict: dict
) -> list[str]:
    """The mapped field is the c[Number] representation on the corresponding table"""
    return _get_values_from_table(
        conn, table_name=OBJECTS_TBL, field_name=tsm_class_dict[field_name]
    )


# f_path = Path("/home/jjimenez/ScipionUserData/projects/chlamy/Runs/000002_ProtImportTsMovies/")
# db__path = f_path / 'TiltSeriesM.sqlite'
#
# with _connect_db(db__path) as connection:
#     dc = map_classes_table(connection)
#     dp = map_properties_table(connection)
#     read_scipion_sqlite_patch(db__path)
